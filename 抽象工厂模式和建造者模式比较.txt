抽象工厂模式(Abstract Factory Pattern)：向客户端提供一个接口，使得客户端在不必指定产品的具体类型的情况下，创建多个产品族中的产品对象。既提供一个创建一系列相关或相互以来对象的接口，而无需指定它们的具体的类，这就是抽象工厂模式的用意。是工厂方法模式的进一步推广。
优点：
①隔离了具体类的生成，使得客户并不需要知道什么被创建；
②当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象；
③增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。
缺点：
①在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品；
②开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）

建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
优点：
①客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象；
②用户使用不同的具体建造者即可得到不同的产品对象；
③可以更加精细地控制产品的创建过程；
④增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合“开闭原则”。
缺点：
①如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制；
②如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大。


抽象工厂模式与建造者模式的异同点：
相同点：
抽象工厂模式和建造者模式都都是用来创建同时属于几个产品族的对象的模式，都符合开闭原则。
区别：
1.建造者模式是把对象的创建分散开来，然后 由具体类实现，实现创建对象的分解，而建造者模式所有函数加一起才能实现一个对象而抽象工厂或者简单工厂 一个函数就可以创造一个对象建造者模式是创造复杂对象时候的一种分解方式。
2.抽象工厂模式中，每一次工厂对象被调用时都会返回一个完整的对象，至于client如何处理该对象与工厂自身无关；建造者模式，则是一点一点地建造出一个复杂的产品，而这个产品的组装过程就发生在builder角色内部。



